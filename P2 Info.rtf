{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww19180\viewh10960\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Video Game Store Functionality - Due Date: 27th July
\f1\b0 \
\

\f0\b Minimum Requirements:
\f1\b0 \
	Home Page\
	4 more tabs (CRUD operations)\
\

\f0\b Brainstormed Ideas:
\f1\b0 \
	Monthly Game/Collectible Ranking - allow user ranking inputs / comments \
	Individual Game Information Pages with history of game, console, and perhaps links to rarity/worth info?\
	Checkout Page\
\
\

\f0\b Potential Features:
\f1\b0 \
	Post/edit/delete comments and game rankings\
	Add/update/remove items from checkout page  \'97 C# Web API \
	Get individual game/collectible info \'97 Fetch API\
	Search for games/collectibles? \'97 Fetch API\
		Filter/Sort function? \
	LogIn for customers \'97 C# Web API\
	Earned Point system for customers\
	Trade-in options\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b SQL Server: 
\f1\b0 \
\
Nikhils-p2\
Admin Login: trainer \
Password: Password@1234\
\
\
Database = retroStoreDB\
\
Tables: (in no particular order) - will require altering during normalization\
\
Table 1 = tbl_ProductInfo \
	productId, productName, productType, productGenre, productManufacturer, productCost, productQty, productIsInStock\
\
Table 2 = tbl_ProductRankings\
	productName, productranking\
\
Table 3 = tbl_UserInfo/Register \
	userId, userPassword, firstName, lastName, emailAddress, contactNo, age, city, address, userPoints \
\
Table 4 = tbl_OrderInfo\
	orderName, orderProduct, orderQty, orderPrice, paymentType (card/points/tradeIn), pointsEarned\
\
Table 5 = tbl_PaymentInfo\
	paymentType (Visa, Mastercard, Points, tradeIn), cardName, cardNumber, cardSecurityCode, cardAddress, cardZip\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\f0\b Test Data:
\f1\b0 \
\
	500 Video Games/Collectible Items (10 to start)\
	50 Users (2-3 to start)\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97- \

\f0\b Nuget Packages Needed: 
\f1\b0 \
\
	Microsoft.EntityFramework.Design (6.0.7)\
	Microsoft.EntityFramework.Tools (6.0.7)\
	Microsoft.EntityFramework.Core (6.0.7)\
	Microsoft.EntityFramework.SqlServer (6.0.7)\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97- \

\f0\b Using Cloud Database in Visual Studio: 
\f1\b0 \
\

\f0\b In Nuget Package Manager Console:
\f1\b0 \
\
	PM> Scaffold-DBContext \'93below connection string\'94 - outputDir Models/EF -Provider Microsoft.EntityFramework.SqlServer \
\
	Connection string: Server=tcp:Nikhils-p2.database.windows.net,1433;Initial Catalog=retroStoreDB;Persist Security Info=False;User  ID=trainer;Password=Password@1234;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;\
\
	Will be given LinkId (which demonstrates success) - this will place an EF child folder within Models Parent folder in Solution Explorer.\
This also creates a DbContext class with everything needed to use this connection along with a class w/ properties for every table in our database\
\
Add new Entity Framework Controller: \
	Right-Click Controllers folder, add, new scaffolding - new Api Controller with actions using Entity Framework, fill out inputs\
	Instantiate new DbContext class on line 16 and comment out constructor code, build and then test app\
\
	Add new controller and instantiate new DbContext class for Log-In same as above (in namespace type in \'93using shoppingAPI.Models.EF;\'94)\
	Linq queries for actual login function - almost same as SQL queries here\
	\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97- \
\
\
}